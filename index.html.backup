<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Govinda Dughdalay – Milk Shop Manager</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- React (no build needed) -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <!-- jsPDF for PDF invoices -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js" integrity="sha512-YkN3k7WkQb3p1zYlSkf4KJfDw3r96o7Qx7q4mVnPRh1wGg8m3v9o1QxG6LZxD3i9Y4Qnq6y0qj7J8pNn3U2w8g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <!-- Chart.js for simple dashboard charts -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    *{box-sizing:border-box} body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial,sans-serif;margin:0;background:#f7f7fb;color:#222}
    header{background:#1b6; color:#fff; padding:14px 18px; display:flex; align-items:center; justify-content:space-between}
    header h1{margin:0;font-size:18px}
    header small{opacity:.9}
    .container{padding:16px; max-width:1200px; margin:0 auto}
    .tabs{display:flex; gap:8px; flex-wrap:wrap; margin-bottom:12px}
    .tab{border:1px solid #ddd; background:#fff; padding:8px 12px; border-radius:8px; cursor:pointer}
    .tab.active{background:#1b6; color:#fff; border-color:#1b6}
    .grid{display:grid; grid-template-columns:repeat(auto-fit,minmax(260px,1fr)); gap:12px}
    .card{background:#fff; border:1px solid #e6e6ef; border-radius:12px; padding:12px}
    .row{display:flex; gap:8px; align-items:center; flex-wrap:wrap}
    .row.right{justify-content:flex-end}
    input, select, button, textarea{padding:8px 10px; border:1px solid #ddd; border-radius:8px; font-size:14px}
    button{cursor:pointer}
    button.primary{background:#1b6; color:#fff; border-color:#1b6}
    button.warn{background:#c33; color:#fff; border-color:#c33}
    .pill{display:inline-block; padding:2px 8px; border-radius:999px; font-size:12px; border:1px solid #ddd; background:#fafafa}
    .pill.ok{background:#eaffea; border-color:#b7efb7}
    .pill.bad{background:#ffecec; border-color:#f5b5b5}
    .table{width:100%; border-collapse:collapse}
    .table th,.table td{padding:8px; border-bottom:1px solid #eee; text-align:left}
    .muted{opacity:.7}
    .section-title{margin:8px 0}
    .sticky{position:sticky; top:0; background:#fff; z-index:2}
    .footer{padding:12px; text-align:center; color:#666}
    .spacer{flex:1}
  </style>
</head>
<body>
<header>
  <h1>Govinda Dughdalay <small>— Milk Shop Manager</small></h1>
  <div class="row">
    <span class="pill ok">Single Shop</span>
    <button id="exportBtn" class="tab">Export Backup</button>
    <label class="tab" for="importFile" style="cursor:pointer">Import Backup</label>
    <input id="importFile" type="file" accept="application/json" style="display:none" />
  </div>
</header>

<div id="app" class="container"></div>
<div class="footer">© <span id="year"></span> Govinda Dughdalay</div>

<script>
  document.getElementById('year').textContent = new Date().getFullYear();

  const { useState, useMemo, useEffect } = React;

  // ---------- Utilities ----------
  const currency = (n) => "₹ " + (n ?? 0).toFixed(2);
  const uid = () => Math.random().toString(36).slice(2, 10);
  const todayISO = () => new Date().toISOString();
  const parseNum = (v) => Number.isFinite(+v) ? +v : 0;

  const STORAGE_KEY = "govinda_dughdalay_v1";

  const initialProducts = [
    { id: uid(), name: "Milk (500ml)", category: "Milk", description: "Fresh cow milk", price: 30, qty: 100, lowAt: 10 },
    { id: uid(), name: "Milk (1L)",   category: "Milk", description: "Fresh cow milk", price: 60, qty: 80,  lowAt: 10 },
    { id: uid(), name: "Ghee (500g)", category: "Ghee", description: "Pure desi ghee",  price: 450, qty: 20, lowAt: 5 },
    { id: uid(), name: "Paneer (200g)", category: "Paneer", description: "Fresh paneer", price: 90, qty: 30, lowAt: 6 },
    { id: uid(), name: "Rasgulla (tin)", category: "Sweets", description: "Rasgulla tin", price: 180, qty: 15, lowAt: 4 },
  ];

  const defaultState = {
    shop: { name: "Govinda Dughdalay", phone: "+91 90000 00000", addr: "Near Temple Road, Mumbai" },
    products: initialProducts,
    customers: [],
    bills: [],
    cart: [],
  };

  function loadState() {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (!raw) return defaultState;
      const s = JSON.parse(raw);
      // Defensive: ensure keys exist
      return {
        shop: s.shop ?? defaultState.shop,
        products: Array.isArray(s.products) ? s.products : [],
        customers: Array.isArray(s.customers) ? s.customers : [],
        bills: Array.isArray(s.bills) ? s.bills : [],
        cart: Array.isArray(s.cart) ? s.cart : [],
      };
    } catch {
      return defaultState;
    }
  }

  function saveState(state) {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
  }

  function downloadFile(filename, content, type="application/json") {
    const blob = new Blob([content], { type });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = filename; a.click();
    URL.revokeObjectURL(url);
  }

  function genInvoiceNumber(bills) {
    const d = new Date();
    const y = d.getFullYear().toString().slice(-2);
    const m = String(d.getMonth()+1).padStart(2, "0");
    const seq = String((bills?.length ?? 0) + 1).padStart(4, "0");
    return `GD-${y}${m}-${seq}`;
  }

  function genPDF(bill, shop) {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    const lineHeight = 7;
    let y = 14;

    doc.setFontSize(16);
    doc.text(shop.name, 14, y); y+= lineHeight;
    doc.setFontSize(10);
    doc.text(`${shop.addr}`, 14, y); y+= lineHeight;
    doc.text(`Phone: ${shop.phone}`, 14, y); y+= lineHeight+2;

    doc.setFontSize(12);
    doc.text(`Invoice: ${bill.invoiceNo}`, 14, y);
    doc.text(`Date: ${new Date(bill.createdAt).toLocaleString()}`, 140, y, { align: "left" }); y+= lineHeight;
    doc.text(`Customer: ${bill.customer?.name || "-"}`, 14, y);
    doc.text(`Status: ${bill.status}${bill.status==="Pending" && bill.dueDate ? " (Due: "+new Date(bill.dueDate).toLocaleDateString()+")":""}`, 140, y, { align:"left" });
    y+= lineHeight+2;

    // table header
    doc.setFontSize(11);
    doc.text("Item", 14, y);
    doc.text("Qty", 120, y);
    doc.text("Price", 140, y);
    doc.text("Total", 170, y);
    y+= 2; doc.line(14, y, 195, y); y+= 6;

    bill.items.forEach(it=>{
      const line = 6;
      doc.text(it.name, 14, y);
      doc.text(String(it.qty), 120, y, { align:"left" });
      doc.text(currency(it.price), 140, y, { align:"left" });
      doc.text(currency(it.qty*it.price), 170, y, { align:"left" });
      y+= line;
    });

    y+= 2; doc.line(120, y, 195, y); y+= 6;
    doc.setFontSize(12);
    doc.text("Subtotal:", 140, y); doc.text(currency(bill.subtotal), 170, y); y+= lineHeight;
    doc.text("Discount:", 140, y); doc.text(currency(bill.discount), 170, y); y+= lineHeight;
    doc.text("Grand Total:", 140, y); doc.text(currency(bill.total), 170, y); y+= lineHeight+2;

    doc.setFontSize(10);
    doc.text("Thank you for your purchase!", 14, y);

    return doc.output("blob");
  }

  // ---------- Components ----------
  function App(){
    const [state, setState] = useState(loadState());
    const [tab, setTab] = useState("Billing"); // default screen
    const [editingProduct, setEditingProduct] = useState(null);
    const [filter, setFilter] = useState({ billsRange: "all", status: "all", search:"" });
    const [notif, setNotif] = useState("");

    useEffect(()=> saveState(state), [state]);

    // export / import
    useEffect(()=>{
      document.getElementById("exportBtn").onclick = ()=>{
        downloadFile(`govinda-backup-${Date.now()}.json`, JSON.stringify(state, null, 2));
      };
      document.getElementById("importFile").onchange = async (e)=>{
        const file = e.target.files?.[0];
        if(!file) return;
        const txt = await file.text();
        try {
          const json = JSON.parse(txt);
          setState(json);
          setNotif("Backup imported successfully.");
          setTimeout(()=>setNotif(""), 2000);
        } catch {
          setNotif("Invalid backup file.");
          setTimeout(()=>setNotif(""), 2000);
        }
      };
    }, [state]);

    const lowStock = useMemo(()=> state.products.filter(p => p.qty <= (p.lowAt ?? 5)), [state.products]);

    function addOrUpdateProduct(p){
      setState(prev=>{
        const exists = prev.products.some(x => x.id === p.id);
        const products = exists
          ? prev.products.map(x => x.id === p.id ? p : x)
          : [{...p, id: uid()}, ...prev.products];
        return { ...prev, products };
      });
      setEditingProduct(null);
    }

    function removeProduct(id){
      setState(prev=> ({...prev, products: prev.products.filter(p=>p.id!==id)}));
    }

    function addToCart(prod, qty=1){
      qty = Math.max(1, Math.min(qty, prod.qty));
      setState(prev=>{
        const exists = prev.cart.find(c=>c.id===prod.id);
        let cart;
        if(exists){
          const newQty = Math.min(exists.qty + qty, prod.qty);
          cart = prev.cart.map(c=> c.id===prod.id ? {...c, qty:newQty} : c);
        } else {
          cart = [{id:prod.id, name:prod.name, price:prod.price, qty}, ...prev.cart];
        }
        return {...prev, cart};
      });
    }

    function updateCartQty(id, qty){
      qty = Math.max(1, qty);
      setState(prev=> ({...prev, cart: prev.cart.map(c=> c.id===id?{...c, qty}:c)}));
    }

    function removeFromCart(id){
      setState(prev=> ({...prev, cart: prev.cart.filter(c=> c.id!==id)}));
    }

    const cartSubtotal = state.cart.reduce((s,c)=> s + (c.price*c.qty), 0);

    function ensureCustomer(name, phone, religion, general){
      const existing = state.customers.find(c => c.phone === phone && phone);
      if(existing) return existing;
      const cust = { id: uid(), name, phone, religion, general, createdAt: todayISO() };
      setState(prev => ({...prev, customers: [cust, ...prev.customers]}));
      return cust;
    }

    function checkout({ customerName, customerPhone, status, dueDate, discount = 0, religion = "", general = true }){
      if(state.cart.length === 0){ setNotif("Cart is empty."); setTimeout(()=>setNotif(""),1500); return; }
      const cust = ensureCustomer(customerName || "Walk-in", (customerPhone||"").trim(), religion, general);
      const items = state.cart.map(c=>({ ...c }));
      const subtotal = cartSubtotal;
      const total = Math.max(0, subtotal - parseNum(discount));
      const invoiceNo = genInvoiceNumber(state.bills);
      const bill = {
        id: uid(),
        invoiceNo,
        createdAt: todayISO(),
        customer: { id: cust.id, name: cust.name, phone: cust.phone, religion: cust.religion, general: cust.general },
        items,
        subtotal, discount: parseNum(discount),
        total,
        status: status || "Paid",
        dueDate: status==="Pending" ? (dueDate || todayISO()) : null,
      };

      // decrease stock
      const newProducts = state.products.map(p=>{
        const line = items.find(i=> i.id===p.id);
        return line ? {...p, qty: Math.max(0, p.qty - line.qty)} : p;
      });

      // save & reset cart
      setState(prev=> ({...prev, products: newProducts, bills:[bill, ...prev.bills], cart: []}));
      setTab("Bills");

      // Generate and download PDF
      const blob = genPDF(bill, state.shop);
      const filename = `${invoiceNo}.pdf`;
      downloadFile(filename, blob, "application/pdf");

      // WhatsApp share link (prefilled text)
      const invoiceLink = `${window.location.origin}/invoice/${invoiceNo}`;
      const msg = [
        `Invoice ${invoiceNo}`,
        `Customer: ${cust.name}${cust.phone? " ("+cust.phone+")":""}`,
        `Total: ${currency(total)}`,
        `Status: ${bill.status}${bill.status==="Pending" && bill.dueDate ? " (Due: "+new Date(bill.dueDate).toLocaleDateString()+")" : ""}`,
        `Items:`,
        ...items.map(i=>`- ${i.name} x ${i.qty} = ${currency(i.qty*i.price)}`),
        "",
        `View Invoice: ${invoiceLink}`,
        "Note: Attach the downloaded PDF when sending."
      ].join("\n");
      const waLink = `https://wa.me/${(cust.phone||"").replace(/\D/g,"")}?text=${encodeURIComponent(msg)}`;
      setNotif("Invoice created. Tap here to share on WhatsApp.");
      const onClick = ()=>{
        window.open(waLink, "_blank");
      };
      showToast(`Invoice created: ${invoiceNo}. Click to WhatsApp.`, onClick);
    }

    function showToast(text, onClick){
      const el = document.createElement("div");
      el.textContent = text;
      Object.assign(el.style,{
        position:"fixed", bottom:"16px", right:"16px", background:"#1b6", color:"#fff",
        padding:"10px 14px", borderRadius:"10px", cursor:"pointer", zIndex:9999, boxShadow:"0 4px 16px rgba(0,0,0,.2)"
      });
      el.onclick = ()=>{ onClick && onClick(); document.body.removeChild(el); };
      document.body.appendChild(el);
      setTimeout(()=>{ if(el.parentNode) el.parentNode.removeChild(el); }, 8000);
    }

    // --------- Views ----------
    function Products(){
      const [q, setQ] = useState("");
      const [form, setForm] = useState(editingProduct || { id:null, name:"", category:"Milk", description:"", price:0, qty:0, lowAt:5 });

      useEffect(()=> setForm(editingProduct || { id:null, name:"", category:"Milk", description:"", price:0, qty:0, lowAt:5 }), [editingProduct]);

      function submit(e){
        e.preventDefault();
        if(!form.name.trim()) return;
        addOrUpdateProduct({
          id: form.id || uid(),
          name: form.name.trim(),
          category: form.category.trim(),
          description: form.description.trim(),
          price: parseNum(form.price),
          qty: parseNum(form.qty),
          lowAt: parseNum(form.lowAt) || 5
        });
      }

      const filtered = state.products.filter(p => {
        const s = (q||"").toLowerCase();
        return [p.name,p.category,p.description].join(" ").toLowerCase().includes(s);
      });

      return (
        React.createElement("div", null,
          React.createElement("div", {className:"row sticky", style:{gap:8, padding:"8px 0", marginBottom:8, borderBottom:"1px solid #eee", background:"#f7f7fb"}},
            React.createElement("input", {placeholder:"Search products...", value:q, onChange:e=>setQ(e.target.value), style:{flex:1, minWidth:220}}),
            React.createElement("button", {className:"primary", onClick:()=>setEditingProduct({ id:null, name:"", category:"Milk", description:"", price:0, qty:0, lowAt:5 })}, "Add Product")
          ),
          editingProduct && React.createElement("form", {className:"card", onSubmit:submit},
            React.createElement("div",{className:"grid"},
              React.createElement("div", null,
                React.createElement("label", null, "Name"),
                React.createElement("input",{value:form.name, onChange:e=>setForm({...form,name:e.target.value}), required:true})
              ),
              React.createElement("div", null,
                React.createElement("label", null, "Category"),
                React.createElement("select",{value:form.category,onChange:e=>setForm({...form,category:e.target.value})},
                  ["Milk","Ghee","Paneer","Sweets","Other"].map(c=>React.createElement("option",{key:c,value:c},c))
                )
              ),
              React.createElement("div", null,
                React.createElement("label", null, "Price"),
                React.createElement("input",{type:"number", step:"0.01", value:form.price, onChange:e=>setForm({...form,price:e.target.value})})
              ),
              React.createElement("div", null,
                React.createElement("label", null, "Quantity"),
                React.createElement("input",{type:"number", value:form.qty, onChange:e=>setForm({...form,qty:e.target.value})})
              ),
              React.createElement("div", null,
                React.createElement("label", null, "Low Stock Alert At"),
                React.createElement("input",{type:"number", value:form.lowAt, onChange:e=>setForm({...form,lowAt:e.target.value})})
              ),
              React.createElement("div", {style:{gridColumn:"1/-1"}},
                React.createElement("label", null, "Description"),
                React.createElement("textarea",{value:form.description, onChange:e=>setForm({...form,description:e.target.value})})
              )
            ),
            React.createElement("div",{className:"row right", style:{marginTop:8}},
              React.createElement("button",{type:"button", onClick:()=>setEditingProduct(null)}, "Cancel"),
              React.createElement("button",{className:"primary", type:"submit"}, form.id? "Update":"Create")
            )
          ),
          React.createElement("div",{className:"grid"},
            filtered.map(p => React.createElement("div",{key:p.id,className:"card"},
              React.createElement("div",{className:"row"},
                React.createElement("strong", null, p.name),
                React.createElement("span",{className:"spacer"}),
                p.qty <= (p.lowAt??5) ? React.createElement("span",{className:"pill bad"},"Low") : React.createElement("span",{className:"pill ok"},"OK")
              ),
              React.createElement("div",{className:"muted"}, p.category),
              React.createElement("div", null, p.description || React.createElement("span",{className:"muted"},"No description")),
              React.createElement("div",{className:"row", style:{marginTop:6}},
                React.createElement("span", null, currency(p.price)), 
                React.createElement("span",{className:"spacer"}),
                React.createElement("span", null, "Qty: ", p.qty)
              ),
              React.createElement("div",{className:"row right", style:{marginTop:8}},
                React.createElement("button",{onClick:()=>setEditingProduct(p)},"Edit"),
                React.createElement("button",{className:"warn", onClick:()=>removeProduct(p.id)},"Delete"),
                React.createElement("button",{className:"primary", onClick:()=>addToCart(p,1)},"Add to Cart")
              )
            ))
          )
        )
      );
    }

    function Billing(){
      const [customerName, setCustomerName] = useState("");
      const [customerPhone, setCustomerPhone] = useState("");
      const [status, setStatus] = useState("Paid");
      const [discount, setDiscount] = useState(0);
      const [religion, setReligion] = useState("");
      const [general, setGeneral] = useState(true);
      const [q, setQ] = useState("");

      // Filter products by search
      const filteredProducts = useMemo(() => {
        const s = (q||"").toLowerCase();
        return state.products.filter(p =>
          [p.name, p.category, p.description].join(" ").toLowerCase().includes(s)
        );
      }, [q, state.products]);

      function handleCheckout(e){
        e.preventDefault();
        checkout({
          customerName,
          customerPhone,
          status,
          discount,
          religion,
          general
        });
      }

      return (
        React.createElement("div", null,
          React.createElement("h2", null, "Billing"),
          React.createElement("h3", null, "Products"),
          React.createElement("div", {className:"row sticky", style:{gap:8, padding:"8px 0", marginBottom:8, borderBottom:"1px solid #eee", background:"#f7f7fb"}},
            React.createElement("input", {placeholder:"Search products...", value:q, onChange:e=>setQ(e.target.value), style:{flex:1, minWidth:220}})
          ),
          React.createElement("div",{className:"grid"},
            filteredProducts.map(p => React.createElement("div",{key:p.id,className:"card"},
              React.createElement("div",{className:"row"},
                React.createElement("strong", null, p.name),
                React.createElement("span",{className:"spacer"}),
                p.qty <= (p.lowAt??5) ? React.createElement("span",{className:"pill bad"},"Low") : React.createElement("span",{className:"pill ok"},"OK")
              ),
              React.createElement("div",{className:"muted"}, p.category),
              React.createElement("div", null, p.description || React.createElement("span",{className:"muted"},"No description")),
              React.createElement("div",{className:"row", style:{marginTop:6}},
                React.createElement("span", null, currency(p.price)), 
                React.createElement("span",{className:"spacer"}),
                React.createElement("span", null, "Qty: ", p.qty)
              ),
              React.createElement("div",{className:"row right", style:{marginTop:8}},
                React.createElement("button",{className:"primary", onClick:()=>addToCart(p,1)},"Add to Cart")
              )
            ))
          ),
          React.createElement("h3", null, "Cart"),
          state.cart.length === 0
            ? React.createElement("div", {className:"muted"}, "Cart is empty.")
            : React.createElement("table", {className:"table"},
                React.createElement("thead", null,
                  React.createElement("tr", null,
                    React.createElement("th", null, "Item"),
                    React.createElement("th", null, "Qty"),
                    React.createElement("th", null, "Price"),
                    React.createElement("th", null, "Total"),
                    React.createElement("th", null, "")
                  )
                ),
                React.createElement("tbody", null,
                  state.cart.map(item =>
                    React.createElement("tr", {key: item.id},
                      React.createElement("td", null, item.name),
                      React.createElement("td", null,
                        React.createElement("input", {
                          type: "number",
                          min: 1,
                          max: state.products.find(p=>p.id===item.id)?.qty ?? 99,
                          value: item.qty,
                          style: {width:50},
                          onChange: e => updateCartQty(item.id, parseNum(e.target.value))
                        })
                      ),
                      React.createElement("td", null, currency(item.price)),
                      React.createElement("td", null, currency(item.price * item.qty)),
                      React.createElement("td", null,
                        React.createElement("button", {className:"warn", onClick:()=>removeFromCart(item.id)}, "Remove")
                      )
                    )
                  )
                )
              ),
          React.createElement("div", {className:"row right", style:{marginTop:8}},
            React.createElement("strong", null, "Subtotal: ", currency(state.cart.reduce((s,c)=>s+c.price*c.qty,0)))
          ),
          React.createElement("h3", {style:{marginTop:32}}, "Checkout"),
          React.createElement("form", {className:"card", style:{marginTop:12}, onSubmit:handleCheckout},
            React.createElement("div", {className:"row"},
              React.createElement("input", {
                placeholder: "Customer Name",
                value: customerName,
                onChange: e => setCustomerName(e.target.value),
                required: true,
                style: {marginRight:8}
              }),
              React.createElement("input", {
                placeholder: "Customer Phone (WhatsApp)",
                value: customerPhone,
                onChange: e => setCustomerPhone(e.target.value),
                style: {marginRight:8}
              }),
              React.createElement("select", {
                value: status,
                onChange: e => setStatus(e.target.value),
                style: {marginRight:8}
              },
                React.createElement("option", {value:"Paid"}, "Paid"),
                React.createElement("option", {value:"Pending"}, "Pending")
              ),
              React.createElement("select", {
                value: religion,
                onChange: e => setReligion(e.target.value),
                style: {marginRight:8}
              },
                React.createElement("option", {value:""},"Select Religion"),
                ["Hindu","Muslim","Christian","Sikh","Other"].map(r=>React.createElement("option",{key:r,value:r},r))
              ),
              React.createElement("label", {style:{marginRight:8}},
                React.createElement("input",{
                  type:"checkbox",
                  checked:general,
                  onChange:e=>setGeneral(e.target.checked)
                }),
                " General"
              ),
              React.createElement("input", {
                type: "number",
                placeholder: "Discount",
                value: discount,
                onChange: e => setDiscount(e.target.value),
                style: {marginRight:8, width:100}
              }),
              React.createElement("button", {className:"primary", type:"submit"}, "Create Invoice & PDF")
            )
          )
        )
      );
    }
    function Bills(){
      return React.createElement("div", null,
        React.createElement("h2", null, "Bills"),
        state.bills.length === 0
          ? React.createElement("div", {className:"muted"}, "No bills yet.")
          : React.createElement("table", {className:"table"},
              React.createElement("thead", null,
                React.createElement("tr", null,
                  React.createElement("th", null, "Invoice No"),
                  React.createElement("th", null, "Customer"),
                  React.createElement("th", null, "Total"),
                  React.createElement("th", null, "Status"),
                  React.createElement("th", null, "Date"),
                  React.createElement("th", null, "Actions")
                )
              ),
              React.createElement("tbody", null,
                state.bills.map(b =>
                  React.createElement("tr", {key: b.id},
                    React.createElement("td", null, b.invoiceNo),
                    React.createElement("td", null, b.customer?.name || "-"),
                    React.createElement("td", null, currency(b.total)),
                    React.createElement("td", null, b.status),
                    React.createElement("td", null, new Date(b.createdAt).toLocaleString()),
                    React.createElement("td", null,
                      React.createElement("button", {
                        className: "primary",
                        onClick: () => {
                          const invoiceLink = `${window.location.origin}/invoice/${b.invoiceNo}`;
                          const msg = [
                            `Invoice ${b.invoiceNo}`,
                            `Customer: ${b.customer?.name||"-"}${b.customer?.phone? " ("+b.customer.phone+")":""}`,
                            `Total: ${currency(b.total)}`,
                            `Status: ${b.status}${b.status==="Pending" && b.dueDate ? " (Due: "+new Date(b.dueDate).toLocaleDateString()+")" : ""}`,
                            "Items:",
                            ...b.items.map(i=>`- ${i.name} x ${i.qty} = ${currency(i.qty*i.price)}`),
                            "",
                            `View Invoice: ${invoiceLink}`,
                            "Note: Attach the downloaded PDF when sending."
                          ].join("\n");
                          const waLink = `https://wa.me/${(b.customer?.phone||"").replace(/\D/g,"")}?text=${encodeURIComponent(msg)}`;
                          window.open(waLink, "_blank");
                        }
                      }, "Send to WhatsApp")
                    )
                  )
                )
              )
            )
      );
    }
    function Dashboard(){
      // Total sales
      const totalSales = state.bills.reduce((sum, b) => sum + b.total, 0);
      // Total customers
      const totalCustomers = state.customers.length;
      // Pending bills
      const pendingBills = state.bills.filter(b => b.status === "Pending");
      // Low stock products
      const lowStockProducts = state.products.filter(p => p.qty <= (p.lowAt ?? 5));

      useEffect(() => {
        // Simple chart for sales (last 7 days)
        const ctx = document.getElementById("salesChart");
        if (!ctx) return;
        const days = [];
        const sales = [];
        for(let i=6; i>=0; i--){
          const d = new Date();
          d.setDate(d.getDate()-i);
          const dayStr = d.toLocaleDateString();
          days.push(dayStr);
          const daySales = state.bills.filter(b => new Date(b.createdAt).toLocaleDateString() === dayStr)
            .reduce((sum, b) => sum + b.total, 0);
          sales.push(daySales);
        }
        new window.Chart(ctx, {
          type: "bar",
          data: {
            labels: days,
            datasets: [{ label: "Sales (₹)", data: sales, backgroundColor: "#1b6" }]
          },
          options: { plugins: { legend: { display: false } } }
        });
      }, [state.bills]);

      return (
        React.createElement("div", null,
          React.createElement("h2", null, "Dashboard"),
          React.createElement("div", {className:"grid"},
            React.createElement("div", {className:"card"},
              React.createElement("strong", null, "Total Sales"),
              React.createElement("div", {style:{fontSize:22, margin:"8px 0"}}, currency(totalSales))
            ),
            React.createElement("div", {className:"card"},
              React.createElement("strong", null, "Total Customers"),
              React.createElement("div", {style:{fontSize:22, margin:"8px 0"}}, totalCustomers)
            ),
            React.createElement("div", {className:"card"},
              React.createElement("strong", null, "Pending Bills"),
              React.createElement("div", {style:{fontSize:22, margin:"8px 0"}}, pendingBills.length)
            ),
            React.createElement("div", {className:"card"},
              React.createElement("strong", null, "Low Stock Products"),
              React.createElement("div", {style:{fontSize:22, margin:"8px 0"}}, lowStockProducts.length)
            )
          ),
          React.createElement("h3", {style:{marginTop:32}}, "Sales (Last 7 Days)"),
          React.createElement("canvas", {id:"salesChart", height:80, style:{maxWidth:600}})
        )
      );
    }
    function Customers(){
      const [q, setQ] = useState("");
      const [form, setForm] = useState({ name: "", phone: "", religion: "", general: true });
      const [editingId, setEditingId] = useState(null);

      const filtered = state.customers.filter(c => (c.name+" "+(c.phone||"")).toLowerCase().includes(q.toLowerCase()));
      const pendingByCustomer = useMemo(()=>{
        const map = {};
        state.bills.forEach(b=>{
          if(b.status==="Pending"){
            const key = b.customer?.id || "unknown";
            map[key] = (map[key]||0) + b.total;
          }
        });
        return map;
      },[state.bills]);

      function addCustomer(e){
        e.preventDefault();
        const name = form.name.trim();
        const phone = form.phone.trim();
        if(!name) return;
        if(phone && state.customers.some(c => c.phone === phone && c.id !== editingId)) {
          setNotif("Customer with this phone already exists.");
          setTimeout(()=>setNotif(""), 2000);
          return;
        }
        if(editingId){
          setState(prev => ({
            ...prev,
            customers: prev.customers.map(c => c.id === editingId ? { ...c, ...form } : c)
          }));
          setNotif("Customer updated.");
        } else {
          const cust = { id: uid(), name, phone, religion: form.religion, general: form.general, createdAt: todayISO() };
          setState(prev => ({...prev, customers: [cust, ...prev.customers]}));
          setNotif("Customer added.");
        }
        setForm({ name: "", phone: "", religion: "", general: true });
        setEditingId(null);
        setTimeout(()=>setNotif(""), 1500);
      }

      function editCustomer(c){
        setForm({ name: c.name, phone: c.phone, religion: c.religion, general: c.general });
        setEditingId(c.id);
      }

      function deleteCustomer(id){
        if(confirm("Delete this customer?")) {
          setState(prev => ({
            ...prev,
            customers: prev.customers.filter(c => c.id !== id)
          }));
          setNotif("Customer deleted.");
          setTimeout(()=>setNotif(""), 1500);
          if(editingId === id) {
            setForm({ name: "", phone: "", religion: "", general: true });
            setEditingId(null);
          }
        }
      }

      return (
        React.createElement("div",null,
          React.createElement("div",{className:"row sticky", style:{gap:8, padding:"8px 0", marginBottom:8, borderBottom:"1px solid #eee", background:"#f7f7fb"}},
            React.createElement("input",{placeholder:"Search customers...", value:q, onChange:e=>setQ(e.target.value), style:{flex:1,minWidth:220}})
          ),
          React.createElement("form", {className:"card", onSubmit:addCustomer, style:{marginBottom:12}},
            React.createElement("div",{className:"row"},
              React.createElement("input",{
                placeholder:"Customer Name",
                value:form.name,
                onChange:e=>setForm({...form, name:e.target.value}),
                required:true,
                style:{marginRight:8}
              }),
              React.createElement("input",{
                placeholder:"Phone (optional)",
                value:form.phone,
                onChange:e=>setForm({...form, phone:e.target.value}),
                style:{marginRight:8}
              }),
              React.createElement("select",{
                value:form.religion,
                onChange:e=>setForm({...form, religion:e.target.value}),
                style:{marginRight:8}
              },
                React.createElement("option",{value:""},"Select Religion"),
                ["Hindu","Muslim","Christian","Sikh","Other"].map(r=>React.createElement("option",{key:r,value:r},r))
              ),
              React.createElement("label", {style:{marginRight:8}},
                React.createElement("input",{
                  type:"checkbox",
                  checked:form.general,
                  onChange:e=>setForm({...form, general:e.target.checked})
                }),
                " General"
              ),
              editingId &&
                React.createElement("button",{type:"button", onClick:()=>{setForm({ name: "", phone: "", religion: "", general: true }); setEditingId(null);}}, "Cancel"),
              React.createElement("button",{className:"primary", type:"submit"}, editingId ? "Update Customer" : "Add Customer")
            )
          ),
          React.createElement("table",{className:"table"},
            React.createElement("thead",null,
              React.createElement("tr",null,
                React.createElement("th",null,"Name"),
                React.createElement("th",null,"Phone"),
                React.createElement("th",null,"Religion"),
                React.createElement("th",null,"General"),
                React.createElement("th",null,"Pending"),
                React.createElement("th",null,"Last Purchase"),
                React.createElement("th",null,"Actions")
              )
            ),
            React.createElement("tbody",null,
              filtered.map(c => {
                const pending = pendingByCustomer[c.id] || 0;
                const last = state.bills.find(b=>b.customer?.id===c.id);
                return React.createElement("tr",{key:c.id},
                  React.createElement("td",null,c.name),
                  React.createElement("td",null,c.phone || React.createElement("span",{className:"muted"},"-")),
                  React.createElement("td",null,c.religion || React.createElement("span",{className:"muted"},"-")),
                  React.createElement("td",null,c.general ? React.createElement("span",{className:"pill ok"},"Yes") : React.createElement("span",{className:"pill bad"},"No")),
                  React.createElement("td",null, pending ? React.createElement("span",{className:"pill bad"}, currency(pending)) : React.createElement("span",{className:"pill ok"},"None")),
                  React.createElement("td",null,last ? new Date(last.createdAt).toLocaleString() : React.createElement("span",{className:"muted"},"—")),
                  React.createElement("td",null,
                    React.createElement("button",{onClick:()=>editCustomer(c)}, "Edit"),
                    React.createElement("button",{className:"warn", style:{marginLeft:6}, onClick:()=>deleteCustomer(c.id)}, "Delete")
                  )
                );
              })
            )
          )
        )
      );
    }

    // WhatsApp Marketing Tab
    function WhatsAppMarketing(){
      const [message, setMessage] = useState("");
      const [selectedTag, setSelectedTag] = useState("general");

      // Collect unique religion tags
      const religionTags = Array.from(new Set(state.customers.map(c=>c.religion).filter(Boolean)));

      // Filter customers by tag
      const recipients = useMemo(()=>{
        if(selectedTag==="general") return state.customers.filter(c=>c.general && c.phone);
        return state.customers.filter(c=>c.religion===selectedTag && c.phone);
      }, [selectedTag, state.customers]);

      function sendMarketing(){
        recipients.forEach(c=>{
          const waLink = `https://wa.me/${(c.phone||"").replace(/\D/g,"")}?text=${encodeURIComponent(message)}`;
          window.open(waLink, "_blank");
        });
        setNotif(`Sent to ${recipients.length} customers.`);
        setTimeout(()=>setNotif(""), 2000);
      }

      return (
        React.createElement("div",null,
          React.createElement("h2",null,"WhatsApp Marketing"),
          React.createElement("div",{className:"row", style:{marginBottom:12}},
            React.createElement("select",{value:selectedTag, onChange:e=>setSelectedTag(e.target.value), style:{marginRight:8}},
              React.createElement("option",{value:"general"},"General"),
              religionTags.map(tag=>React.createElement("option",{key:tag,value:tag},tag))
            ),
            React.createElement("input",{
              placeholder:"Type your marketing message...",
              value:message,
              onChange:e=>setMessage(e.target.value),
              style:{flex:1, minWidth:220}
            }),
            React.createElement("button",{className:"primary", onClick:sendMarketing, disabled:!message || recipients.length===0},"Send to ", recipients.length, " users")
          ),
          React.createElement("div",null,
            recipients.length===0
              ? React.createElement("div",{className:"muted"},"No recipients for selected tag.")
              : React.createElement("ul",null,
                  recipients.map(c=>React.createElement("li",{key:c.id},`${c.name} (${c.phone})`))
                )
          )
        )
      );
    }

    const tabs = [
      ["Billing", Billing],
      ["Products", Products],
      ["Customers", Customers],
      ["Bills", Bills],
      ["Dashboard", Dashboard],
      ["WhatsApp Marketing", WhatsAppMarketing], // NEW TAB
    ];

    return (
      React.createElement(React.Fragment, null,
        notif && React.createElement("div",{className:"card", style:{borderLeft:"4px solid #1b6"}}, notif),
        React.createElement("div",{className:"tabs"},
          tabs.map(([name]) => React.createElement("div",{
            key:name, className: "tab" + (tab===name?" active":""), onClick: ()=> setTab(name)
          }, name))
        ),
        tabs.map(([name,Comp]) => tab===name ? React.createElement(Comp,{key:name}) : null)
      )
    );
  }

  ReactDOM.createRoot(document.getElementById("app")).render(React.createElement(App));
</script>
</body>
</html>
